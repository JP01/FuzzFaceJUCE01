#include "MyLookAndFeel.h"


//Default constructor creates a paramKnob
MyLookAndFeel::MyLookAndFeel()
{
	MyLookAndFeel(PARAM_KNOB);
}


//Take the knob type as arguement and Retrieve the image from the binary data generated by Juce
MyLookAndFeel::MyLookAndFeel(KnobType knobType) 
{
	if (knobType == PARAM_KNOB) {
		this->knobStrip = ImageCache::getFromMemory(BinaryData::paramKnob_png, BinaryData::paramKnob_pngSize);
	} 
	else if (knobType == GAIN_KNOB) {
		this->knobStrip = ImageCache::getFromMemory(BinaryData::gainKnob_png, BinaryData::gainKnob_pngSize);
	}
	else if (knobType == METER) {
		this->knobStrip = ImageCache::getFromMemory(BinaryData::meterLight_png, BinaryData::meterLight_pngSize);
	}
}


MyLookAndFeel::~MyLookAndFeel()
{
}

//Override the drawRotarySlider method from the parent class to draw the filmstrip knob
void MyLookAndFeel::drawRotarySlider(
	Graphics& g,
	int     x,
	int 	y,
	int 	width,
	int 	height,
	float 	sliderPosProportional,
	float 	rotaryStartAngle,
	float 	rotaryEndAngle,
	Slider & 	slider)
{		
	const double fractRotation = (slider.getValue() - slider.getMinimum()) / (slider.getMaximum() - slider.getMinimum()); //value between 0 and 1 for current amount of rotation
	const int nFrames = knobStrip.getHeight() / knobStrip.getWidth(); // number of frames for vertical film strip
	const int frameIdx = (int)ceil(fractRotation * ((double)nFrames - 1.0)); // current index from 0 --> nFrames-1
	const float radius = jmin(width / 2.0f, height / 2.0f);
	const float centreX = x + width * 0.5f;
	const float centreY = y + height * 0.5f;
	const float rx = centreX - radius - 1.0f;
	const float ry = centreY - radius - 1.0f;

	g.drawImage(knobStrip,
		(int)rx,
		(int)ry,
		2 * (int)radius,
		2 * (int)radius,   //Dest
		0,
		frameIdx*knobStrip.getWidth(),
		knobStrip.getWidth(),
		knobStrip.getWidth()); //Source

}


